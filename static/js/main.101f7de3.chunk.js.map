{"version":3,"sources":["serviceWorker.js","Components/Cards.js","Components/CardsList.js","Components/Scroll.js","Components/Search.js","Components/Error.js","Container/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Cards","id","name","email","className","alt","src","CardsList","robo","map","user","i","key","Scroll","props","style","overflow","border","height","children","Search","searchnew","type","placeholder","onChange","Error","state","errors","error","this","setState","Component","App","onSearchChange","event","searchfield","target","value","robot","console","log","fetch","then","response","json","filterobots","filter","cat","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"kMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCOSC,EApBJ,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,GAAGC,EAAc,EAAdA,KAAKC,EAAS,EAATA,MAErB,OACA,yBAAKC,UAAU,kDAIf,yBAAMC,IAAI,SAASC,IAAG,gCAA2BL,EAA3B,cACtB,4BAAKC,GACL,2BAAIC,KCsBWI,G,MA/BD,SAAC,GAAU,IAATC,EAAQ,EAARA,KAGhB,OACI,6BAEAA,EAAKC,KAAI,SAACC,EAAKC,GAEX,OAEE,kBAAC,EAAD,CAECC,IAAKD,EAELV,GAAIO,EAAKG,GAAGV,GACXC,KAAMM,EAAKG,GAAGT,KACbC,MAAOK,EAAKG,GAAGT,aCEbW,EApBD,SAACC,GAEf,OACK,yBAAKC,MAAO,CAACC,SAAS,SAASC,OAAO,gBAAgBC,OAAO,UAE5DJ,EAAMK,WCcGC,EApBD,SAAC,GAAe,IAAdC,EAAa,EAAbA,UAEhB,OACA,yBAAMjB,UAAU,OACZ,2BACAA,UAAU,uBACVkB,KAAK,SAASC,YAAY,SAC1BC,SAAUH,MCuBCI,E,kDA5Bf,WAAYX,GAAO,IAAD,8BACd,cAAMA,IAELY,MAAM,CAAEC,QAAO,GAHF,E,8DASAC,GAEdC,KAAKC,SAAS,CAACH,QAAO,M,+BAMtB,OAAIE,KAAKH,MAAMC,OAEJ,sCAGJE,KAAKf,MAAMK,a,GAvBFY,aC4ELC,G,wDArEX,aAAc,IAAD,8BACT,gBAgBJC,eAAe,SAACC,GACZ,EAAKJ,SAAS,CAACK,YAAYD,EAAME,OAAOC,SAdxC,EAAKX,MAAM,CACPY,MAAO,GACPH,YAAY,IAEhBI,QAAQC,IAAI,QARH,E,gEAWO,IAAD,OAEvBC,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAAQF,MAAK,SAAAhC,GAAI,OAAE,EAAKoB,SAAS,CAACQ,MAAM5B,S,+BAcvG,IAAD,EAEqBmB,KAAKH,MAAxBY,EAFF,EAEEA,MAAMH,EAFR,EAEQA,YAENU,EAAYP,EAAMQ,QAAO,SAAAC,GAC3B,OAAOA,EAAI7C,KAAK8C,cAAcC,SAASd,EAAYa,kBAGvD,OAAQV,EAAMY,OAMV,yBAAK9C,UAAU,MAEf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAUiB,UAAWQ,KAAKI,iBAC1B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAWzB,KAAOqC,OAXlB,wBAAIzC,UAAU,MAAd,mB,GAtCM2B,cCIlBoB,IAASC,OACN,kBAAC,EAAD,MACEC,SAASC,eAAe,SPqHvB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLW,QAAQX,MAAMA,EAAMiC,a","file":"static/js/main.101f7de3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\n\r\n\r\n\r\nlet Cards =({id,name,email})=>{\r\n \r\nreturn(\r\n<div className=\"tc bg-yellow dib br3 bw3 pa2 ma2 grow shadow-5\">\r\n\r\n\r\n\r\n<img  alt=\"robots\" src={`https://robohash.org/ ${id}?200x200` } />\r\n<h2>{name}</h2>\r\n<p>{email}</p>\r\n\r\n\r\n\r\n</div>\r\n\r\n\r\n)\r\n\r\n}\r\n\r\nexport default Cards","import React from 'react';\r\nimport Cards from './Cards';\r\nimport { findRenderedDOMComponentWithClass } from 'react-dom/test-utils';\r\n\r\n\r\nlet CardsList=({robo})=>{  \r\n\r\n  \r\nreturn(\r\n    <div>\r\n    {\r\n    robo.map((user,i)=>{\r\n\r\n        return(\r\n        \r\n          <Cards\r\n           \r\n           key={i}\r\n\r\n           id={robo[i].id}\r\n            name={robo[i].name}\r\n             email={robo[i].name}\r\n             \r\n             />\r\n        );\r\n        })\r\n    \r\n    }\r\n\r\n\r\n\r\n\r\n</div>\r\n);\r\n\r\n}\r\nexport default CardsList;","import React from 'react';\r\n\r\n\r\nconst Scroll =(props)=>{\r\n \r\nreturn (\r\n     <div style={{overflow:'scroll',border:'3px red solid',height:'800px' }}  >\r\n\r\n    { props.children}\r\n\r\n     </div>\r\n\r\n\r\n)\r\n    \r\n    \r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default Scroll;","import React from \"react\";\r\n\r\nconst Search =({searchnew})=>{\r\n\r\nreturn(\r\n<div  className=\"pa2\">\r\n    <input  \r\n    className=\"pa2 bg-lightest-blue\"\r\n    type=\"search\" placeholder=\"robots\"\r\n    onChange={searchnew}\r\n    \r\n    \r\n    />\r\n    \r\n    \r\n    \r\n   </div> \r\n\r\n)\r\n\r\n}\r\n\r\nexport default Search;","import React,{Component} from 'react';\r\n\r\n\r\nclass Error extends Component{\r\nconstructor(props){\r\n    super(props)\r\n{\r\nthis.state={ errors:false\r\n}\r\n\r\n}\r\n}\r\n\r\ncomponentDidCatch(error){\r\n\r\n    this.setState({errors:true})\r\n}\r\n\r\n\r\nrender(){\r\n\r\n    if (this.state.errors){\r\n\r\n        return <h1>yoooo </h1>\r\n    }\r\n    else {\r\n    return this.props.children\r\n\r\n    }\r\n}\r\n}\r\n\r\nexport default Error\r\n\r\n","import React, { Component } from 'react';\r\nimport CardsList from '../Components/CardsList';\r\nimport Scroll from '../Components/Scroll';\r\nimport Search from '../Components/Search';\r\nimport Error from '../Components/Error';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component{\r\n    \r\n    constructor(){\r\n        super()\r\n        \r\n        \r\n        this.state={\r\n            robot: [],\r\n            searchfield:''\r\n        }\r\n        console.log(\"Comp\");\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\nfetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json()).then(user=>this.setState({robot:user}));\r\n\r\n    }\r\n     \r\n    onSearchChange=(event)=>{\r\n        this.setState({searchfield:event.target.value})\r\n      \r\n        \r\n        }\r\n        \r\n    \r\n    \r\n    \r\n\r\n    render(){\r\n\r\n        const{robot,searchfield}=this.state;\r\n        \r\n        const filterobots=robot.filter(cat=>{\r\n            return cat.name.toLowerCase().includes(searchfield.toLowerCase())\r\n            \r\n        })\r\n        return !robot.length ?\r\n            <h1 className=\"tc\">now loading</h1> :\r\n    \r\n        (\r\n\r\n\r\n            <div className=\"tc\">\r\n            \r\n            <h1 className=\"f1\">robofriends</h1>\r\n            <Search   searchnew={this.onSearchChange}/>\r\n            <Scroll>\r\n            <Error>\r\n            <CardsList robo ={filterobots}/>\r\n            </Error>   \r\n            </Scroll>\r\n            \r\n            </div>\r\n            \r\n              )\r\n        }\r\n              \r\n              \r\n        }\r\n        \r\n    \r\n\r\n    \r\n    \r\n\r\n\r\n    \r\n\r\n\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './Container/App';\n\n\n\nReactDOM.render(\n   <App/>,\n     document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}